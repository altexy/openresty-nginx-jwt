worker_processes  1;
error_log /dev/stderr warn;

events {
    worker_connections 1024;
}

# make sure to set plaintext JWT_SECRET environment variable
env JWT_SECRET;

http {

    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /dev/stdout main;

    lua_package_path "/usr/local/openresty/lualib/?.lua;;";

    gzip on;
    gzip_min_length 1;

    server {
        listen 80;

		server_name _;

		if ($http_x_forwarded_proto = "http") {
			return 301 https://$host$request_uri;
		}

        location /pm-set-cookie {
            content_by_lua_block {
                local expire=31104000
                local cookie=ngx.var.arg_key .. "=" .. ngx.var.arg_value .. "; Path=/; Expires=" .. ngx.cookie_time(ngx.time() + expire)
                ngx.header["Set-Cookie"] = { cookie }
            }
        }
		
        location / {
            access_by_lua_file /bearer.lua;

            default_type text/html;

            proxy_pass PROXY_SERVER_NAME;

            proxy_set_header Accept-Encoding "";

            header_filter_by_lua_block {
                ngx.header.content_length = nil
            }

            body_filter_by_lua_block {
                if (ngx.req.get_headers()["Origin"] ~= nil) then
                    local response_body = ngx.arg[1]
                    local string_to_search = "</body>"
                    local replacement_string = "<script>document.domain = \"" .. ngx.req.get_headers()["Origin"] .. "\";</script></body>"
                    ngx.arg[1] = ngx.re.sub(ngx.arg[1], "</body>", replacement_string)
                end

                return ngx.arg[1]
            }
        }
    }
}
