worker_processes  1;
error_log logs/error.log info;

events {
    worker_connections 1024;
}

# make sure to set plaintext JWT_SECRET environment variable
env JWT_SECRET;

http {

    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log /dev/stdout main;

    lua_package_path "/usr/local/openresty/lualib/?.lua;;";

    gzip on;
    gzip_min_length 1;

    map $http_upgrade $connection_upgrade {
        default "keep-alive, Upgrade";
        ''      close;
    }

    server {
        listen 80;

		#server_name _;

		if ($http_x_forwarded_proto = "http") {
			return 301 https://$host$request_uri;
		}

        location /pm-set-cookie {
            content_by_lua_block {
                local expire = 31104000
                local cookie = ngx.var.arg_key .. "=" .. ngx.var.arg_value .. "; Path=/; Expires=" .. ngx.cookie_time(ngx.time() + expire)
                ngx.header["Set-Cookie"] = cookie
            }
        }

        location / {
            access_by_lua_file /bearer.lua;

            default_type text/html;

            proxy_pass PROXY_SERVER_NAME;

            proxy_set_header Accept-Encoding "";

            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Host $http_host;
            proxy_set_header X-NginX-Proxy true;
            proxy_redirect off;


            header_filter_by_lua_block {
                local referer = ngx.var.http_referer
                local content_type = ngx.header.content_type
                if content_type and content_type:find("text/html") and referer and #referer > 0 then
                    ngx.header.content_length = nil
                    ngx.ctx.body_buffer = {}
                end
            }

            body_filter_by_lua_block {
                local body_buffer = ngx.ctx.body_buffer
                if not body_buffer then
                    return
                end

                local arg1 = ngx.arg[1]
                if arg1 and #arg1 > 0 then
                    body_buffer[#body_buffer + 1] =  arg1
                end

                if not ngx.arg[2] then
                    ngx.arg[1] = nil
                    return
                end

                local body = table.concat(body_buffer)
                ngx.ctx.body_buffer = nil -- explicitly free possibly big buffer asap

                local replacement_string = "<script>document.domain = \"" .. ngx.var.http_referer .. "\";</script></body>"
                local body = ngx.re.sub(body, "</body>", replacement_string)

                ngx.arg[1] = body
            }
        }

        location /ws {
            access_by_lua_file /bearer.lua;

            proxy_pass PROXY_SERVER_NAME;

            proxy_pass_header Sec-Websocket-Extensions;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            proxy_set_header X-Forwarded-Host $http_host;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Host $http_host;
            proxy_set_header Accept-Encoding "";
        }

    }
}
